/*
NONYE Data Reseller - Single-file React component
- Tailwind CSS classes used (assumes Tailwind is configured in the host project)
- Uses default export of a React component for preview.
- Includes: Header, Hero, Data Plans grid, Purchase modal flow (mock), Recharge Card Printing tool, Simple Admin stub, Footer
- Replace mock functions (mockFetchPlans, mockPurchase) with real API calls.
- Payment integrations (Stripe/Paystack) are placeholders and must be implemented server-side.
*/

import React, { useState, useEffect } from 'react';

const mockFetchPlans = () => {
  // sample data plans similar to what a data reselling site shows
  return Promise.resolve([
    { id: 'plan-1', name: 'Daily 100MB', price: 50, validity: '1 day', network: 'MTN' },
    { id: 'plan-2', name: 'Daily 500MB', price: 150, validity: '1 day', network: 'GLO' },
    { id: 'plan-3', name: 'Weekly 1.5GB', price: 400, validity: '7 days', network: 'AIRTEL' },
    { id: 'plan-4', name: 'Monthly 5GB', price: 1500, validity: '30 days', network: '9MOBILE' },
  ]);
};

const mockPurchase = ({ planId, phone, network }) => {
  // simulate network call
  return new Promise((res) => setTimeout(() => res({ success: true, ref: 'TX-' + Date.now() }), 900));
};

export default function NonyeDataResellerApp() {
  const [plans, setPlans] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [showCheckout, setShowCheckout] = useState(false);
  const [phone, setPhone] = useState('');
  const [network, setNetwork] = useState('MTN');
  const [message, setMessage] = useState('');
  const [printInputs, setPrintInputs] = useState({ quantity: 10, denomination: 100 });
  const [printedCards, setPrintedCards] = useState([]);
  const [adminOpen, setAdminOpen] = useState(false);

  useEffect(() => {
    setLoading(true);
    mockFetchPlans().then((p) => {
      setPlans(p);
      setLoading(false);
    });
  }, []);

  const openCheckout = (plan) => {
    setSelectedPlan(plan);
    setShowCheckout(true);
    setMessage('');
  };

  const handlePurchase = async () => {
    if (!phone.match(/^0\d{10}$/)) return setMessage('Enter a valid Nigerian phone number (e.g. 08012345678)');
    setMessage('Processing purchase...');
    const res = await mockPurchase({ planId: selectedPlan.id, phone, network });
    if (res?.success) {
      setMessage(`Success! Reference: ${res.ref}`);
      setShowCheckout(false);
      setPhone('');
    } else {
      setMessage('Purchase failed. Try again.');
    }
  };

  const handlePrintCards = () => {
    // generate mock recharge card codes
    const qty = Number(printInputs.quantity) || 1;
    const denom = Number(printInputs.denomination) || 100;
    const cards = Array.from({ length: qty }).map(() => ({
      id: 'RC-' + Math.random().toString(36).slice(2, 10).toUpperCase(),
      value: denom,
      pin: Math.random().toString().slice(2, 14),
    }));
    setPrintedCards(cards);
  };

  return (
    <div className="min-h-screen bg-slate-50 text-slate-900">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="max-w-6xl mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-indigo-600 rounded-lg flex items-center justify-center text-white font-bold">ND</div>
            <div>
              <h1 className="text-lg font-semibold">NONYE Digital Concept</h1>
              <p className="text-xs text-slate-500">Data reselling & recharge printing</p>
            </div>
          </div>
          <nav className="flex items-center space-x-4">
            <button onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })} className="text-sm">Home</button>
            <button onClick={() => document.getElementById('plans')?.scrollIntoView({ behavior: 'smooth' })} className="text-sm">Plans</button>
            <button onClick={() => document.getElementById('printer')?.scrollIntoView({ behavior: 'smooth' })} className="text-sm">Printer</button>
            <button onClick={() => setAdminOpen((s) => !s)} className="bg-indigo-600 text-white px-3 py-2 rounded-md text-sm">Admin</button>
          </nav>
        </div>
      </header>

      {/* Hero */}
      <main className="max-w-6xl mx-auto p-6">
        <section className="grid md:grid-cols-2 gap-6 items-center py-8">
          <div>
            <h2 className="text-3xl font-extrabold mb-3">Buy data at competitive reseller rates</h2>
            <p className="text-slate-600 mb-4">Instant delivery, multiple networks, and a built-in recharge card printing tool for retailers.</p>
            <div className="flex gap-3">
              <a href="#plans" className="bg-indigo-600 text-white px-4 py-2 rounded-md">Browse Plans</a>
              <a href="#printer" className="border border-slate-300 px-4 py-2 rounded-md">Print Recharge Cards</a>
            </div>
            <div className="mt-6 bg-white p-4 rounded shadow-sm">
              <h4 className="font-semibold">Quick stats</h4>
              <div className="grid grid-cols-3 gap-3 mt-3">
                <div className="p-2 border rounded">Active users<br/><strong>1,243</strong></div>
                <div className="p-2 border rounded">Transactions<br/><strong>12,907</strong></div>
                <div className="p-2 border rounded">Cards Printed<br/><strong>4,520</strong></div>
              </div>
            </div>
          </div>
          <div className="bg-gradient-to-tr from-indigo-50 to-white rounded-lg p-6 shadow-inner">
            <div className="rounded-lg p-6 bg-white border">
              <h3 className="text-xl font-semibold">Quick buy</h3>
              <p className="text-sm text-slate-500 mb-3">Select a plan below to checkout instantly.</p>
              <div className="grid gap-3">
                {loading ? (
                  <div>Loading plans...</div>
                ) : (
                  plans.slice(0,3).map((p) => (
                    <div key={p.id} className="flex items-center justify-between p-3 border rounded">
                      <div>
                        <div className="font-medium">{p.name}</div>
                        <div className="text-xs text-slate-500">{p.network} • {p.validity}</div>
                      </div>
                      <div className="text-right">
                        <div className="font-semibold">₦{p.price}</div>
                        <button onClick={() => openCheckout(p)} className="mt-2 text-xs text-indigo-600">Buy</button>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        </section>

        {/* Plans section */}
        <section id="plans" className="py-8">
          <h3 className="text-2xl font-bold mb-4">Available Data Plans</h3>
          <div className="grid sm:grid-cols-2 md:grid-cols-4 gap-4">
            {plans.map((p) => (
              <div key={p.id} className="bg-white p-4 rounded shadow-sm border">
                <div className="flex justify-between items-start">
                  <div>
                    <h4 className="font-semibold">{p.name}</h4>
                    <div className="text-xs text-slate-500">{p.network} • {p.validity}</div>
                  </div>
                  <div className="text-right">
                    <div className="text-lg font-bold">₦{p.price}</div>
                    <div className="text-xs text-slate-400">Reseller</div>
                  </div>
                </div>
                <div className="mt-4 flex justify-between items-center">
                  <button onClick={() => openCheckout(p)} className="px-3 py-2 bg-indigo-600 text-white rounded">Buy</button>
                  <button className="text-xs underline text-slate-600">Details</button>
                </div>
              </div>
            ))}
          </div>
        </section>

        {/* Recharge Card Printer */}
        <section id="printer" className="py-8">
          <h3 className="text-2xl font-bold mb-4">Recharge Card Printing</h3>
          <div className="grid md:grid-cols-2 gap-6">
            <div className="bg-white p-4 rounded shadow-sm border">
              <label className="block text-sm">Quantity</label>
              <input type="number" className="mt-1 p-2 border rounded w-full" value={printInputs.quantity} onChange={(e) => setPrintInputs(s => ({...s, quantity: e.target.value}))} />
              <label className="block text-sm mt-3">Denomination (₦)</label>
              <input type="number" className="mt-1 p-2 border rounded w-full" value={printInputs.denomination} onChange={(e) => setPrintInputs(s => ({...s, denomination: e.target.value}))} />
              <div className="mt-4 flex gap-3">
                <button onClick={handlePrintCards} className="px-4 py-2 bg-indigo-600 text-white rounded">Generate</button>
                <button onClick={() => setPrintedCards([])} className="px-4 py-2 border rounded">Clear</button>
              </div>
            </div>
            <div className="bg-white p-4 rounded shadow-sm border">
              <h4 className="font-semibold">Generated Cards</h4>
              <div className="mt-3 grid gap-2">
                {printedCards.length === 0 ? (
                  <div className="text-sm text-slate-500">No cards yet. Use the generator to create printable recharge cards.</div>
                ) : (
                  printedCards.map((c) => (
                    <div key={c.id} className="p-2 border rounded flex justify-between items-center">
                      <div>
                        <div className="text-xs text-slate-400">{c.id}</div>
                        <div className="font-mono font-semibold">{c.pin}</div>
                      </div>
                      <div>₦{c.value}</div>
                    </div>
                  ))
                )}
              </div>
              {printedCards.length > 0 && (
                <div className="mt-4">
                  <button onClick={() => window.print()} className="px-4 py-2 bg-green-600 text-white rounded">Print Page</button>
                </div>
              )}
            </div>
          </div>
        </section>

        {/* Footer */}
        <footer className="mt-12 py-6 text-sm text-slate-600">
          <div className="border-t pt-4">© {new Date().getFullYear()} NONYE Digital Concept — Built for resellers</div>
        </footer>
      </main>

      {/* Checkout Modal */}
      {showCheckout && selectedPlan && (
        <div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50">
          <div className="bg-white max-w-md w-full p-6 rounded shadow-lg">
            <h4 className="font-bold text-lg">Checkout</h4>
            <div className="mt-2">
              <div className="text-sm">Plan: <strong>{selectedPlan.name}</strong></div>
              <div className="text-sm">Network: <strong>{selectedPlan.network}</strong></div>
              <div className="text-sm">Price: <strong>₦{selectedPlan.price}</strong></div>
            </div>
            <div className="mt-4 grid gap-2">
              <label className="text-xs">Network</label>
              <select className="p-2 border rounded" value={network} onChange={(e) => setNetwork(e.target.value)}>
                <option>MTN</option>
                <option>GLO</option>
                <option>AIRTEL</option>
                <option>9MOBILE</option>
              </select>
              <label className="text-xs">Phone number</label>
              <input className="p-2 border rounded" placeholder="08012345678" value={phone} onChange={(e) => setPhone(e.target.value)} />
            </div>
            {message && <div className="mt-3 text-sm text-slate-700">{message}</div>}
            <div className="mt-4 flex justify-end gap-2">
              <button onClick={() => setShowCheckout(false)} className="px-3 py-2 border rounded">Cancel</button>
              <button onClick={handlePurchase} className="px-3 py-2 bg-indigo-600 text-white rounded">Pay ₦{selectedPlan.price}</button>
            </div>
            <div className="mt-4 text-xs text-slate-400">Note: This demo uses mock payment functions. Hook up Paystack/Stripe server-side for production.</div>
          </div>
        </div>
      )}

      {/* Admin Drawer (basic) */}
      {adminOpen && (
        <div className="fixed right-0 top-0 h-full w-96 bg-white border-l shadow-lg p-4 z-40">
          <div className="flex justify-between items-center">
            <h4 className="font-bold">Admin Panel</h4>
            <button onClick={() => setAdminOpen(false)} className="text-sm">Close</button>
          </div>
          <div className="mt-4">
            <h5 className="font-semibold">Plans</h5>
            <ul className="mt-2 space-y-2">
              {plans.map(p => (
                <li key={p.id} className="flex justify-between items-center border p-2 rounded">
                  <div>
                    <div className="font-medium">{p.name}</div>
                    <div className="text-xs text-slate-500">₦{p.price} • {p.network}</div>
                  </div>
                  <div className="flex gap-2">
                    <button className="text-xs underline">Edit</button>
                    <button className="text-xs text-red-600">Delete</button>
                  </div>
                </li>
              ))}
            </ul>
            <div className="mt-4">
              <h5 className="font-semibold">Quick Actions</h5>
              <div className="mt-2 flex flex-col gap-2">
                <button onClick={() => alert('Exporting transactions... (demo)')} className="px-3 py-2 border rounded">Export Transactions</button>
                <button onClick={() => alert('Seeding demo users...')} className="px-3 py-2 border rounded">Seed Demo Users</button>
              </div>
            </div>
          </div>
        </div>
      )}

    </div>
  );
}
